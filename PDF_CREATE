import os
import tkinter as tk
from tkinter import messagebox, scrolledtext
from PyPDF2 import PdfReader
from fpdf import FPDF
import tempfile
import shutil
import re

# Folder path where PDFs are stored
folder_path = os.path.expanduser("~/Documents/Sample")
pdf_files = []

# Path to DejaVuSans.ttf font file (adjust as needed)
FONT_PATH = r"C:\Users\User\Desktop\SE_Skill\py\dejavu-fonts-ttf-2.37\ttf\DejaVuSans.ttf"  # Ensure correct path

def ensure_directory_exists():
    """Create the folder_path directory if it doesn't exist."""
    if not os.path.exists(folder_path):
        try:
            os.makedirs(folder_path)
        except OSError as e:
            messagebox.showerror("Error", f"Failed to create directory {folder_path}:\n{str(e)}")
            return False
    return True

def validate_filename(filename):
    """Check if the filename is valid."""
    if not filename:
        return False, "Filename cannot be empty."
    if not re.match(r'^[a-zA-Z0-9][a-zA-Z0-9_\-\. ]*$', filename):
        return False, "Filename contains invalid characters."
    return True, ""

def create_pdf_file(content, save_path):
    """Create a PDF file with the given content and save it to save_path."""
    try:
        if not os.path.exists(FONT_PATH):
            raise FileNotFoundError(f"Font file not found: {FONT_PATH}")
        pdf = FPDF()
        pdf.add_page()
        pdf.add_font('DejaVu', '', FONT_PATH)
        pdf.set_font('DejaVu', '', 12)
        pdf.multi_cell(0, 10, content)
        pdf.output(save_path)
        return True, ""
    except (FileNotFoundError, PermissionError, Exception) as e:
        return False, f"Could not create PDF:\n{str(e)}"

def load_pdfs():
    """Load PDF files from the folder into the listbox."""
    pdf_files.clear()
    listbox.delete(0, tk.END)
    if not ensure_directory_exists():
        return
    try:
        for file in os.listdir(folder_path):
            if file.lower().endswith(".pdf"):
                full_path = os.path.join(folder_path, file)
                name = os.path.splitext(file)[0]
                pdf_files.append((name, full_path))
                listbox.insert(tk.END, name)
        if not pdf_files:
            messagebox.showinfo("No PDFs", "No PDF files found in the folder.")
    except PermissionError:
        messagebox.showerror("Error", f"Permission denied accessing folder:\n{folder_path}")
    except OSError as e:
        messagebox.showerror("Error", f"Error accessing folder:\n{str(e)}")

def create_pdf():
    """Open a window to create a new PDF."""
    def save_new_pdf():
        content = editor.get("1.0", tk.END).strip()
        filename = entry_name.get().strip()
        is_valid, error_msg = validate_filename(filename)
        if not is_valid or not content:
            messagebox.showwarning("Missing", error_msg or "Enter both file name and content.")
            return
        save_path = os.path.join(folder_path, filename + ".pdf")
        success, error = create_pdf_file(content, save_path)
        if success:
            messagebox.showinfo("Success", f"{filename}.pdf created.")
            win.destroy()
            load_pdfs()
        else:
            messagebox.showerror("Error", error)

    win = tk.Toplevel(root, bg="black")
    win.title("Create PDF")
    win.geometry("600x500")

    tk.Label(win, text="File Name:", font=("Helvetica", 12), fg="yellow", bg="black").pack(pady=5)
    entry_name = tk.Entry(win, font=("Helvetica", 12), width=40, bg="gray20", fg="white")
    entry_name.pack(pady=5)

    editor = scrolledtext.ScrolledText(win, wrap=tk.WORD, width=70, height=20,
                                      font=("Helvetica", 11), bg="black", fg="white", insertbackground="white")
    editor.pack(pady=10)

    tk.Button(win, text="Save", bg="red", fg="white", font=("Helvetica", 12, "bold"), command=save_new_pdf).pack(pady=10)

def open_pdf():
    """Open and display the content of a selected PDF."""
    selected = listbox.curselection()
    if not selected:
        messagebox.showwarning("Selection", "Please select a PDF to read.")
        return
    index = selected[0]
    name, path = pdf_files[index]
    try:
        reader = PdfReader(path)
        text_output = ""
        for page in reader.pages:
            text = page.extract_text()
            if text:
                text_output += text
        win = tk.Toplevel(root, bg="black")
        win.title(f"Read PDF - {name}")
        win.geometry("600x500")

        viewer = scrolledtext.ScrolledText(win, wrap=tk.WORD, width=70, height=25,
                                          font=("Helvetica", 11), bg="black", fg="white", insertbackground="white")
        viewer.insert(tk.END, text_output or "No readable text found in the PDF.")
        viewer.config(state=tk.DISABLED)
        viewer.pack(pady=10)
    except PyPDF2.errors.PdfReadError:
        messagebox.showerror("Error", f"Could not read PDF: Corrupted or invalid PDF file.")
    except (FileNotFoundError, PermissionError) as e:
        messagebox.showerror("Error", f"Could not access PDF:\n{str(e)}")

def update_pdf():
    """Open a window to update the content of a selected PDF."""
    selected = listbox.curselection()
    if not selected:
        messagebox.showwarning("Selection", "Please select a PDF to update.")
        return
    index = selected[0]
    name, path = pdf_files[index]
    try:
        reader = PdfReader(path)
        text_output = ""
        for page in reader.pages:
            text = page.extract_text()
            if text:
                text_output += text
    except PyPDF2.errors.PdfReadError:
        messagebox.showerror("Error", f"Could not read PDF: Corrupted or invalid PDF file.")
        return
    except (FileNotFoundError, PermissionError) as e:
        messagebox.showerror("Error", f"Could not access PDF:\n{str(e)}")
        return

    def save_updated_pdf():
        content = editor.get("1.0", tk.END).strip()
        if not content:
            messagebox.showwarning("Empty", "Please enter some content.")
            return
        temp_path = None
        try:
            with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp_file:
                temp_path = tmp_file.name
                success, error = create_pdf_file(content, temp_path)
                if not success:
                    raise Exception(error)
                os.replace(temp_path, path)
                messagebox.showinfo("Success", f"{name}.pdf updated.")
                win.destroy()
                load_pdfs()
        except (FileNotFoundError, PermissionError, OSError) as e:
            messagebox.showerror("Error", f"Could not update PDF:\n{str(e)}")
        finally:
            if temp_path and os.path.exists(temp_path):
                try:
                    os.remove(temp_path)
                except:
                    pass

    win = tk.Toplevel(root, bg="black")
    win.title(f"Update PDF - {name}")
    win.geometry("600x500")

    editor = scrolledtext.ScrolledText(win, wrap=tk.WORD, width=70, height=20,
                                      font=("Helvetica", 11), bg="black", fg="white", insertbackground="white")
    editor.insert(tk.END, text_output or "No readable text found in the PDF.")
    editor.pack(pady=10)

    tk.Button(win, text="Save", bg="red", fg="white", font=("Helvetica", 12, "bold"), command=save_updated_pdf).pack(pady=10)

def delete_pdf():
    """Delete a selected PDF after confirmation."""
    selected = listbox.curselection()
    if not selected:
        messagebox.showwarning("Selection", "Please select a PDF to delete.")
        return
    index = selected[0]
    name, path = pdf_files[index]
    confirm = messagebox.askyesno("Delete", f"Are you sure to delete {name}?")
    if confirm:
        try:
            os.remove(path)
            messagebox.showinfo("Deleted", f"{name}.pdf deleted.")
            load_pdfs()
        except (FileNotFoundError, PermissionError) as e:
            messagebox.showerror("Error", f"Could not delete PDF:\n{str(e)}")

# Initialize Tkinter window
root = tk.Tk()
root.title("PDF Manager - CRUD Interface")
root.geometry("1000x650")
root.configure(bg="black")

tk.Label(root, text="PDF Manager", font=("Helvetica", 16, "bold"), fg="yellow", bg="black").pack(pady=10)

button_frame = tk.Frame(root, bg="black")
button_frame.pack(pady=10)

tk.Button(button_frame, text="Create", bg="green", fg="white", font=("Helvetica", 12), width=12, command=create_pdf).pack(side=tk.LEFT, padx=10)
tk.Button(button_frame, text="Read", bg="blue", fg="white", font=("Helvetica", 12), width=12, command=open_pdf).pack(side=tk.LEFT, padx=10)
tk.Button(button_frame, text="Update", bg="orange", fg="white", font=("Helvetica", 12), width=12, command=update_pdf).pack(side=tk.LEFT, padx=10)
tk.Button(button_frame, text="Delete", bg="red", fg="white", font=("Helvetica", 12), width=12, command=delete_pdf).pack(side=tk.LEFT, padx=10)

listbox = tk.Listbox(root, width=60, height=18, font=("Helvetica", 12), bg="black", fg="yellow", selectbackground="gray30")
listbox.pack(pady=10)
listbox.bind("<Double-Button-1>", lambda event: open_pdf())

tk.Button(root, text="Load PDFs", font=("Helvetica", 12), bg="gray20", fg="white", command=load_pdfs).pack(pady=10)

load_pdfs()
root.mainloop()
