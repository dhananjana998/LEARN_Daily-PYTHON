#Define the base class for All National collage members
class CollegeMember:
 #Constructor for the called automatically create a new member
 def__init__(self,name,age,phone,gender): #initialize the member's basic information
    self.name=name   #store the member's name 
    self.age=age     #store the member's age 
    self.phone=phone #store the member's phone  
    self.gender=gender#store the member's gender 

 #Method to display the member information
 def display(self):
    print(f"Name:{self.name},Age:{self.age},Phone-Number:{self.phone},Gender:{self.gender}")

#TeacherTrainers class inharits from  CollegeMember
  class TeacherTrainers:
    #Constructors for TeacherTrainers with additional trainers_id parameter
      def __init__(self,name,age,phone,gender,trainers_id)
        #Called the parent class constructor
        super().__init__(name,age,phone,gender)
        #set the specific information of TeacherTrainers
        self.trainers_id=trainers_id
        #override diplay specific information of TeacherTrainers
         def display(self):
             print(f"Teacher Trainer-Name:{self.name},Age:{self.age},Phone-Number:{self.phone},Gender:{self.gender},ID:{self.trainers_id}")
    
#Lecturer class inharits from  CollegeMember
  class Lecturer :
    #Constructors for Lecturer with additional lecturer_id parameter
      def __init__(self,name,age,phone,gender,lecturer_id,subject)
        #Called the parent class constructor
        super().__init__(name,age,phone,gender)
        #set the specific information of Lecturer
        self.lecturer_id=lecturer_id
        self.subject=subject
        #override diplay specific information of Lecturer
         def display(self):
             print(f"Teacher Trainer-Name:{self.name},Age:{self.age},Phone-Number:{self.phone},Gender:{self.gender},ID:{self.lecturer_id},Subject:{self.Subject}")
    

#AcademicStaff class inharits from  CollegeMember
  class AcademicStaff:
    #Constructors for AcademicStaff with additional academicStaff_id parameter
      def __init__(self,name,age,phone,gender,academicStaff_id,workHours)
        #Called the parent class constructor
        super().__init__(name,age,phone,gender)
        #set the specific information of AcademicStaff
        self.academicStaff_id=academicStaff_id
        self.workHours=workHours
        #override diplay specific information of AcademicStaff
         def display(self):
             print(f"Teacher Trainer-Name:{self.name},Age:{self.age},Phone-Number:{self.phone},Gender:{self.gender},ID:{self.academicStaff_id},Work-Hours:{self.workHours}")
    
  
#main programme execution Start here
#Create the empty list  list to store all school members
members=[]

print("-----------------------------------Enter details of NCOE members------------------------------")

#Loop to collect the information for all members
for i in range(1,501):
     print(f"\n Member No: {i}")

     #Ask the member type
     member_type = input("Type ("teachertrainers/lecturer/academictaff):(must be simple letter)").lower()

     #Get common  information for all members
     name=input("Enter Your Name :")
     age=input("Enter Your Age:")
     phone=input("Enter Your Phone Number :")
     gender=input("Enter Your Gender :")

     #Create the type base information
      if member_type == "teachertrainers":
        trainers_id = input("Teacher Trainers ID: ")
        member = Student(name, age, phone,trainers_id)
    elif member_type == "lecturer":
        subject = input("Subject: ")
        lecturer_id=input("Lecturer ID: ")
        
        member = Teacher(name, age, phone, subject,lecturer_id)
     elif member_type == "academictaff":
       
        academicStaff_id = input("AcademicStaff ID ")
        workHours=input("Work Hour")
        member = Teacher(name, age, phone, academicStaff_id,workHours)
    else:
        # If type is invalid, create a generic 
        print("Invalid type!")
        member = SchoolMember(name, age, phone)
 # Add the new member to our list
    members.append(member)
print("\n\n-------------------------------------NCOE Member----------------------------------------")

for member in members:
   # Call the display method appropriate for each member type
    member.display()


""" output:
Member No: 1
Type (teachertrainers/lecturer/academicstaff): teachertrainers
Enter Your Name: dhananjana
Enter Your Age: 23
Enter Your Phone Number: 0775822669
Enter Your Gender: Female
Teacher Trainers ID: s2514

Member No: 2
Type (teachertrainers/lecturer/academicstaff): lecturer
Enter Your Name: Dissanayake
Enter Your Age: 45
Enter Your Phone Number: 0785678934
Enter Your Gender: Male
Lecturer ID: L001
Subject: Sociology

Member No: 3
Type (teachertrainers/lecturer/academicstaff): academicstaff
Enter Your Name: kamal
Enter Your Age: 34
Enter Your Phone Number: 0765678903
Enter Your Gender: Male
AcademicStaff ID: A004
Work Hours: 6
"""


   
